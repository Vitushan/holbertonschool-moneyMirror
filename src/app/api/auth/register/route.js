import { prisma } from '@/lib/prisma'
import bcrypt from 'bcryptjs'


export async function POST(request) {
  try {
    // Get form data
    const { name, email, password } = await request.json();

    // Basic validation
    if (!name || !email || !password) {
      return Response.json(
        { error: 'All fields are required' },
        { status: 400 }
      );
    }
    if (password.length < 6) {
      return Response.json(
        { error: 'Password must be at least 6 characters long' },
        { status: 400 }
      );
    }

    // Verify if email already exists
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      return Response.json(
        { error: 'This email is already in use' },
        { status: 400 }
      );
    }

    // Validate name length
    if (name.length < 2) {
      return Response.json(
        { error: 'Name must be at least 2 characters long' },
        { status: 400 }
      );
    }

    // Validate email format with regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return Response.json(
        { error: 'Invalid email format' },
        { status: 400 },
      );
    }

    // Password hashing
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create user in database
    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword,
      },
    });
  
    // Success without returned password
    return Response.json({
      success: true,
      message: 'User created successfully !',
      user: {
        id: user.id, // id generated by MySQL
        name: user.name,
        email: user.email
        //no password for the security
      }
    })
    
  } catch (error) {
    console.error('Error during registration:', error);
  }
}

export async function GET() {
  console.log('GET request received at /api/auth/register')
  return Response.json({ message: 'GET method works! API is alive!' })
}