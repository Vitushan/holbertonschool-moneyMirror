import { prisma } from '../../../lib/prisma'
import bcrypt from 'bcryptjs'


export async function POST(request) {
  try {
    console.log('POST request received')
    //get forms data
    const { name, email, password } = await request.json()
    console.log('Data parsed:', { name, email, password: '***' })
    //basic validation
    if (!name || !email || !password) {
      return Response.json(
        { error: 'all fields is required' },
        { status: 400 }
      )
    }
    if (password.length < 6) {
      return Response.json(
        { error: 'The password must be contain minimum 6 characters' },
        { status: 400 }
      )
    }

    //verify if email is already exist (unique mail by user)
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      return Response.json(
        { error: 'This email is already used' },
        { status: 400 }
      )
    }

    //validate for name length
    if (name.length < 2) {
      return Response.json(
        { error: 'Name must be at least 2 characters long' },
        { status: 400 }
      )
    }

    //validate email format with regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return Response.json(
        { error: 'Your mail address is wrong.' },
        { status: 400}
      )
    }
  
    // password hashing (12 is salt round, strong security but is slow)
    const hashedPassword = await bcrypt.hash(password, 12)

    //create User in MySQL db
    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword //saving hash password
      }
    })
  
    // Success without returned password
    return Response.json({
      success: true,
      message: 'User created successfully !',
      user: {
        id: user.id, // id generated by MySQL
        name: user.name,
        email: user.email
        //no password for the security
      }
    })
    
  } catch (error) {
    console.error('Error in POST /api/auth/register:', error)
    return Response.json(
      { error: 'Server error: ' + error.message },
      { status: 500 }
    )
  }
}

export async function GET() {
  console.log('GET request received at /api/auth/register')
  return Response.json({ message: 'GET method works! API is alive!' })
}